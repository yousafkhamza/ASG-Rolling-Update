---
- name: "Create A ASG with ELB"
  become: true
  hosts: localhost
  vars_files:
    - asg.vars
  vars_prompt:
    - name: access_key
      prompt: "Enter Your AWS IAM Access_Key"
      private: no
    - name: secret_key
      prompt: "Enter Your AWS IAM Secret Key"
      private: no
  tasks:
    - name: "Dependancy Tasks 01-Install PIP"
      yum:
        name: pip
        state: present

    - name: "Depandancy Task 02-Install setuptools"
      pip:
        name: setuptools
        state: present

    - name: "Depandancy Task 03-Install virtualenv"
      pip:
        name: virtualenv
        state: present

    - name: "Depandancy Task 04-Install boto"
      pip:
        name: boto
        state: present

    - name: "Depandancy Task 05-Install boto3"
      ignore_errors: true
      pip:
        name: boto3
        state: present

    - name: "Depandancy Task 06-Install botocore"
      pip:
        name: botocore
        state: present

    - name: "Task-01-AWS KeyPair Creation"
      ec2_key:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ key }}"
        state: present
      register: key_status

    - name: "Task 01.1-AWS KeyPair Copy to a PEM file"
      when: key_status.changed == true
      copy:
        content: "{{ key_status.key.private_key }}"
        dest: "{{ key }}.pem"
        mode: 0400

    - name: "Task 03-Create Security Group"
      ec2_group:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ env }}_{{ sg_name }}"
        description: "22,80,443,3306 Port Created by Ansible"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 22
            to_port: 22
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 443
            to_port: 443
            cidr_ip: 0.0.0.0/0
          - proto: tcp
            from_port: 3306
            to_port: 3306
            cidr_ip: 0.0.0.0/0
      register: sgweb

    - debug:
        var: "sgweb.group_id"

    - name: "Task 04-Create Launch configuration"
      ec2_lc:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ env }}_lc"
        image_id: "{{ ami }}"
        key_name: "{{ key }}"
        security_groups: "{{ sgweb.group_id }}"
        instance_type: "{{ type }}"
        user_data_path: ./userdata.sh
      register: lc_status

    - debug:
        var: "lc_status.name"

    - name: "Task 05-Creating ELB"
      ec2_elb_lb:
        name: "elb"
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        connection_draining_timeout: 60
        cross_az_load_balancing: true
        security_group_ids: "{{ sgweb.group_id }}"
        state: present
        zones:
          - "{{ region }}a"
          - "{{ region }}b"
          - "{{ region }}c"
          - "{{ region }}d"
          - "{{ region }}e"
          - "{{ region }}f"
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80
        health_check:
            ping_protocol: http
            ping_port: 80
            ping_path: "/health.html"
            response_timeout: 2
            interval: 10
            unhealthy_threshold: 2
            healthy_threshold: 2
      register: elb_status

    - debug:
        var: "elb_status.elb.dns_name"

    - name: "Task 06-ASG Creation"
      ec2_asg:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        name: "{{ env }}_asg"
        load_balancers: "{{ elb_status.elb.name }}"
        launch_config_name: "{{ lc_status.name }}"
        health_check_period: 30
        health_check_type: EC2
        replace_all_instances: yes
        min_size: "{{ count }}"
        max_size: "{{ count }}"
        desired_capacity: "{{ count }}"
        tags:
          - Name: ansible_app
            propagate_at_launch: true
      register: asg_status
    - debug:
        var: "asg_status.auto_scaling_group_name"

    - name: "Task 07-Fetch ASG Created EC2 Details"
      ec2_instance_info:
        aws_access_key: "{{ access_key }}"
        aws_secret_key: "{{ secret_key }}"
        region: "{{ region }}"
        filters:
          "tag:aws:autoscaling:groupName": "{{ asg_status.auto_scaling_group_name }}"
          instance-state-name: [ "running"]
      register: asg_instances


    - name: "Task 08-Autoscale - Creating Dynamic Inventory Of Autoscaling EC2"
      add_host:
        name: "{{ item.public_ip_address }}"
        groups: "asg"
        ansible_host: "{{ item.public_ip_address }}"
        ansible_port: 22
        ansible_user: "ec2-user"
        ansible_ssh_private_key_file: ansible.pem
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no"
      with_items:
        - "{{ asg_instances.instances }}"

# Dyanamic Inventory Rolling Update Play
- name: "Task Dynamic Inventory Play 09-ASG Rolling Update Start"
  hosts: asg
  become: true
  serial: 1
  gather_facts: False
  vars_files:
    - instance.vars
  tasks:
    - name: "Task Dynamic Inventory Play 10-Application Updation  - Cloning Git Repository"
      git:
        repo: "{{ git_url }}"
        dest: /var/myapp/
      register: git_status

    - name: "Task Dynamic Inventory Play 11-Application Updation -  Disabling Health Check"
      when: git_status.changed == true
      file:
        path: /var/www/html/health.html
        state: touch
        mode: 0000

    - name: "Task Dynamic Inventory Play 12-Application Updation  - Off Loading From ElB"
      when: git_status.changed == true
      pause:
        seconds: "{{ health_time }}"

    - name: "Task Dynamic Inventory Play 13-Application Updation  - Updating App Data"
      when: git_status.changed == true
      copy:
        src: /var/myapp/
        dest: /var/www/html/
        owner: apache
        group: apache
        remote_src: true

    - name: "Task Dynamic Inventory Play 14-Application Updation -  Enabling Health Check"
      when: git_status.changed == true
      file:
        path: /var/www/html/health.html
        state: touch
        mode: 0444

    - name: "Task Dynamic Inventory Play 15-Application Updation  - Loading EC2 To ELB"
      when: git_status.changed == true
      pause:
        seconds: "{{ health_time }}"
